.navigation-color-loop(@ruleset) when (length(@colors) > = 1) {
  @length: length(@colors);
  .looper(1);

  .looper(@index) when (@index <= @length) and (length(extract(@colors, @index)) = 2) {
    @navPair: extract(@colors, @index);
    @navColorName: extract(@navPair, 1);
    @navColorValue: extract(@navPair, 2);
    @ruleset();
    .looper(@index + 1);
  }
}

:root {
  --swiper-navigation-size: 32px;
  /*
  --swiper-navigation-color: var(--swiper-theme-color);
  */
}

.slider-controls {
  // KU specific container to hold navigation
  position: relative;
}

.swiper-button-next,
.swiper-button-prev {
  position: absolute;
  top: 50%;
  transform: translate(0,-50%);
  width: 40px;
  height: 40px;
  z-index: 2;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: inherit;
  opacity: 0.3;

  &.swiper-button-disabled {
    opacity: 0.25;
    cursor: auto;
    pointer-events: none;
  }

  &:before {
    font-family: @custom-icon-font-family-name;
    content: @icon-arrow;
    font-size: var(--swiper-navigation-size, 32px);
    text-transform: none !important;
  }

  &:focus {
    .tab-focus();
  }

  &:focus,
  &:hover {
    &:before {
      opacity: 1;
    }
  }
}

.swiper-button-prev,
.swiper-container-rtl .swiper-button-next {
  .icon-arrow-back;
  left: -5%;
  right: auto;
}

.swiper-button-next,
.swiper-container-rtl .swiper-button-prev {
  right: -5%;
  left: auto;
}
.navigation-color-loop({ .swiper-button-prev, .swiper-button-next { &.swiper-button-@{navColorName} { --swiper-navigation-color: @navColorValue; } } });

.swiper-button-lock {
  display: none;
}
